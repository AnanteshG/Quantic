name: Bi-Weekly Newsletter Generation

on:
  # Run twice weekly: Tuesday at 9:00 AM UTC and Friday at 9:00 AM UTC
  schedule:
    - cron: "0 9 * * 2" # Tuesday
    - cron: "0 9 * * 5" # Friday

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      test_mode:
        description: "Run in test mode (limits recipients)"
        required: false
        default: "false"
        type: boolean

jobs:
  generate-newsletter:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Node.js dependencies
        run: npm ci

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Debug secrets availability
        run: |
          echo "Checking which secrets are available:"
          echo "GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY != '' }}"
          echo "SENDER_EMAIL: ${{ secrets.SENDER_EMAIL != '' }}"
          echo "SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD != '' }}"
          echo "UNSUBSCRIBE_SECRET: ${{ secrets.UNSUBSCRIBE_SECRET != '' }}"
          echo "NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL != '' }}"

      - name: Test news scraper
        run: |
          python scripts/news_scraper.py --quiet

      - name: Generate and send newsletter
        run: |
          node scripts/production-newsletter.js
        env:
          # Gemini AI Configuration
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

          # Email Configuration
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}

          # Firebase Configuration
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}

          # Application Configuration
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          UNSUBSCRIBE_SECRET: ${{ secrets.UNSUBSCRIBE_SECRET }}
          TEST_MODE: false
          
          # Default SMTP settings if not provided
          SMTP_SERVER: ${{ secrets.SMTP_SERVER || 'smtp.gmail.com' }}
          SMTP_PORT: ${{ secrets.SMTP_PORT || '587' }}

      - name: Upload newsletter logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: newsletter-logs-${{ github.run_number }}
          path: |
            *.log
          retention-days: 30

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Newsletter Generation Failed',
              body: `The bi-weekly newsletter generation failed on ${new Date().toISOString()}. Please check the logs for run #${context.runNumber}.`
            })
